/**
 * @file r3.h
 *
 * @brief This header file was generated by cantools version 40.2.1 Mon Feb 17 23:55:26 2025.
 *
 * @copyright Copyright (c) 2018-2019 Erik Moqvist
 *
 * @par License
 * The MIT License (MIT)
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef R3_H
#define R3_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define R3_GROUP45_FRAME_ID (0x476u)
#define R3_GROUP52_FRAME_ID (0x6f6u)
#define R3_GROUP50_FRAME_ID (0x6f3u)
#define R3_GROUP43_FRAME_ID (0x474u)
#define R3_GROUP42_FRAME_ID (0x473u)
#define R3_GROUP49_FRAME_ID (0x6f2u)
#define R3_GROUP48_FRAME_ID (0x6f1u)
#define R3_GROUP47_FRAME_ID (0x6f0u)
#define R3_GROUP40_FRAME_ID (0x471u)
#define R3_GROUP20_FRAME_ID (0x3e0u)
#define R3_GROUP24_FRAME_ID (0x3e4u)
#define R3_GROUP15_FRAME_ID (0x372u)
#define R3_GROUP39_FRAME_ID (0x470u)
#define R3_GROUP13_FRAME_ID (0x370u)
#define R3_GROUP5_FRAME_ID (0x368u)
#define R3_GROUP1_FRAME_ID (0x361u)
#define R3_GROUP0_FRAME_ID (0x360u)

/* Frame lengths in bytes. */
#define R3_GROUP45_LENGTH (8u)
#define R3_GROUP52_LENGTH (8u)
#define R3_GROUP50_LENGTH (8u)
#define R3_GROUP43_LENGTH (8u)
#define R3_GROUP42_LENGTH (8u)
#define R3_GROUP49_LENGTH (8u)
#define R3_GROUP48_LENGTH (8u)
#define R3_GROUP47_LENGTH (8u)
#define R3_GROUP40_LENGTH (8u)
#define R3_GROUP20_LENGTH (8u)
#define R3_GROUP24_LENGTH (8u)
#define R3_GROUP15_LENGTH (8u)
#define R3_GROUP39_LENGTH (8u)
#define R3_GROUP13_LENGTH (8u)
#define R3_GROUP5_LENGTH (8u)
#define R3_GROUP1_LENGTH (8u)
#define R3_GROUP0_LENGTH (8u)

/* Extended or standard frame types. */
#define R3_GROUP45_IS_EXTENDED (0)
#define R3_GROUP52_IS_EXTENDED (0)
#define R3_GROUP50_IS_EXTENDED (0)
#define R3_GROUP43_IS_EXTENDED (0)
#define R3_GROUP42_IS_EXTENDED (0)
#define R3_GROUP49_IS_EXTENDED (0)
#define R3_GROUP48_IS_EXTENDED (0)
#define R3_GROUP47_IS_EXTENDED (0)
#define R3_GROUP40_IS_EXTENDED (0)
#define R3_GROUP20_IS_EXTENDED (0)
#define R3_GROUP24_IS_EXTENDED (0)
#define R3_GROUP15_IS_EXTENDED (0)
#define R3_GROUP39_IS_EXTENDED (0)
#define R3_GROUP13_IS_EXTENDED (0)
#define R3_GROUP5_IS_EXTENDED (0)
#define R3_GROUP1_IS_EXTENDED (0)
#define R3_GROUP0_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/* Frame Names. */
#define R3_GROUP45_NAME "group45"
#define R3_GROUP52_NAME "group52"
#define R3_GROUP50_NAME "group50"
#define R3_GROUP43_NAME "group43"
#define R3_GROUP42_NAME "group42"
#define R3_GROUP49_NAME "group49"
#define R3_GROUP48_NAME "group48"
#define R3_GROUP47_NAME "group47"
#define R3_GROUP40_NAME "group40"
#define R3_GROUP20_NAME "group20"
#define R3_GROUP24_NAME "group24"
#define R3_GROUP15_NAME "group15"
#define R3_GROUP39_NAME "group39"
#define R3_GROUP13_NAME "group13"
#define R3_GROUP5_NAME "group5"
#define R3_GROUP1_NAME "group1"
#define R3_GROUP0_NAME "group0"

/* Signal Names. */
#define R3_GROUP45_BRAKE_PRESSURE_REAR_NAME "brake_pressure_rear"
#define R3_GROUP45_BRAKE_PRESSURE_FRONT_RATIO_NAME "brake_pressure_front_ratio"
#define R3_GROUP45_BRAKE_PRESSURE_REAR_RATIO_NAME "brake_pressure_rear_ratio"
#define R3_GROUP45_BRAKE_PRESSURE_BIAS_NAME "brake_pressure_bias"
#define R3_GROUP52_TOTAL_FUEL_USED_SINCE_TRIP_NAME "total_fuel_used_since_trip"
#define R3_GROUP52_TRIP_METER_1_NAME "trip_meter_1"
#define R3_GROUP50_FRONT_TYRE_RECOMMENDED_PRESSURE_NAME "front_tyre_recommended_pressure"
#define R3_GROUP50_REAR_TYRE_RECOMMENDED_PRESSURE_NAME "rear_tyre_recommended_pressure"
#define R3_GROUP50_REAR_RIGHT_TYRE_AIR_LEAK_NAME "rear_right_tyre_air_leak"
#define R3_GROUP50_REAR_LEFT_TYRE_AIR_LEAK_NAME "rear_left_tyre_air_leak"
#define R3_GROUP50_FRONT_RIGHT_TYRE_AIR_LEAK_NAME "front_right_tyre_air_leak"
#define R3_GROUP50_FRONT_LEFT_TYRE_AIR_LEAK_NAME "front_left_tyre_air_leak"
#define R3_GROUP50_ENGINE_PROTECTION_SEVERITY_LEVEL_NAME "engine_protection_severity_level"
#define R3_GROUP50_ENGINE_PROTECTION_REASON_NAME "engine_protection_reason"
#define R3_GROUP43_VERTICAL_G_NAME "vertical_g"
#define R3_GROUP43_PITCH_RATE_NAME "pitch_rate"
#define R3_GROUP43_ROLL_RATE_NAME "roll_rate"
#define R3_GROUP43_YAW_RATE_NAME "yaw_rate"
#define R3_GROUP42_TOTAL_FUEL_USED_NAME "total_fuel_used"
#define R3_GROUP42_TRACTION_CONTROL_SWITCH_STATE_NAME "traction_control_switch_state"
#define R3_GROUP49_FRONT_LEFT_TYRE_SENSOR_BATTERY_NAME "front_left_tyre_sensor_battery"
#define R3_GROUP49_FRONT_RIGHT_TYRE_SENSOR_BATTERY_NAME "front_right_tyre_sensor_battery"
#define R3_GROUP49_REAR_LEFT_TYRE_SENSOR_BATTERY_NAME "rear_left_tyre_sensor_battery"
#define R3_GROUP49_REAR_RIGHT_TYRE_SENSOR_BATTERY_NAME "rear_right_tyre_sensor_battery"
#define R3_GROUP48_FRONT_LEFT_TYRE_TEMPERATURE_NAME "front_left_tyre_temperature"
#define R3_GROUP48_FRONT_RIGHT_TYRE_TEMPERATURE_NAME "front_right_tyre_temperature"
#define R3_GROUP48_REAR_LEFT_TYRE_TEMPERATURE_NAME "rear_left_tyre_temperature"
#define R3_GROUP48_REAR_RIGHT_TYRE_TEMPERATURE_NAME "rear_right_tyre_temperature"
#define R3_GROUP47_FRONT_LEFT_TYRE_PRESSURE_NAME "front_left_tyre_pressure"
#define R3_GROUP47_FRONT_RIGHT_TYRE_PRESSURE_NAME "front_right_tyre_pressure"
#define R3_GROUP47_REAR_LEFT_TYRE_PRESSURE_NAME "rear_left_tyre_pressure"
#define R3_GROUP47_REAR_RIGHT_TYRE_PRESSURE_NAME "rear_right_tyre_pressure"
#define R3_GROUP40_ACCELERATOR_PEDAL_POSITION_NAME "accelerator_pedal_position"
#define R3_GROUP20_COOLANT_TEMPERATURE_NAME "coolant_temperature"
#define R3_GROUP20_AIR_TEMPERATURE_NAME "air_temperature"
#define R3_GROUP20_FUEL_TEMPERATURE_NAME "fuel_temperature"
#define R3_GROUP20_OIL_TEMPERATURE_NAME "oil_temperature"
#define R3_GROUP24_NEUTRAL_SWITCH_NAME "neutral_switch"
#define R3_GROUP24_GEAR_SWITCH_NAME "gear_switch"
#define R3_GROUP24_CLUTCH_SWITCH_NAME "clutch_switch"
#define R3_GROUP24_OIL_PRESSURE_LIGHT_NAME "oil_pressure_light"
#define R3_GROUP24_FLAT_SHIFT_SWITCH_NAME "flat_shift_switch"
#define R3_GROUP24_CHECK_ENGINE_LIGHT_NAME "check_engine_light"
#define R3_GROUP15_BATTERY_VOLTAGE_NAME "battery_voltage"
#define R3_GROUP15_TARGET_BOOST_LEVEL_NAME "target_boost_level"
#define R3_GROUP15_BAROMETRIC_PRESSURE_NAME "barometric_pressure"
#define R3_GROUP39_WIDEBAND_OVERALL_NAME "wideband_overall"
#define R3_GROUP39_WIDEBAND_BANK_1_NAME "wideband_bank_1"
#define R3_GROUP39_WIDEBAND_BANK_2_NAME "wideband_bank_2"
#define R3_GROUP39_GEAR_SELECTOR_POSITION_NAME "gear_selector_position"
#define R3_GROUP39_GEAR_NAME "gear"
#define R3_GROUP13_VEHICLE_SPEED_NAME "vehicle_speed"
#define R3_GROUP13_INTAKE_CAM_ANGLE_1_NAME "intake_cam_angle_1"
#define R3_GROUP13_INTAKE_CAM_ANGLE_2_NAME "intake_cam_angle_2"
#define R3_GROUP5_WIDEBAND_SENSOR_1_NAME "wideband_sensor_1"
#define R3_GROUP5_WIDEBAND_SENSOR_2_NAME "wideband_sensor_2"
#define R3_GROUP5_WIDEBAND_SENSOR_3_NAME "wideband_sensor_3"
#define R3_GROUP5_WIDEBAND_SENSOR_4_NAME "wideband_sensor_4"
#define R3_GROUP1_FUEL_PRESSURE_NAME "fuel_pressure"
#define R3_GROUP1_OIL_PRESSURE_NAME "oil_pressure"
#define R3_GROUP1_ENGINE_DEMAND_NAME "engine_demand"
#define R3_GROUP1_WASTEGATE_PRESSURE_NAME "wastegate_pressure"
#define R3_GROUP0_RPM_NAME "rpm"
#define R3_GROUP0_MANIFOLD_PRESSURE_NAME "manifold_pressure"
#define R3_GROUP0_THROTTLE_POSITION_NAME "throttle_position"
#define R3_GROUP0_COOLANT_PRESSURE_NAME "coolant_pressure"

/**
 * Signals in message group45.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group45_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: -101.3
     */
    uint16_t brake_pressure_rear;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t brake_pressure_front_ratio;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t brake_pressure_rear_ratio;

    /**
     * Front-Rear
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t brake_pressure_bias;
};

/**
 * Signals in message group52.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group52_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t total_fuel_used_since_trip;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t trip_meter_1;
};

/**
 * Signals in message group50.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group50_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: -101.3
     */
    uint16_t front_tyre_recommended_pressure;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: -101.3
     */
    uint16_t rear_tyre_recommended_pressure;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t rear_right_tyre_air_leak;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t rear_left_tyre_air_leak;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t front_right_tyre_air_leak;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t front_left_tyre_air_leak;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t engine_protection_severity_level;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t engine_protection_reason;
};

/**
 * Signals in message group43.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group43_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t vertical_g;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t pitch_rate;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t roll_rate;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t yaw_rate;
};

/**
 * Signals in message group42.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group42_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t total_fuel_used;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t traction_control_switch_state;
};

/**
 * Signals in message group49.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group49_t {
    /**
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t front_left_tyre_sensor_battery;

    /**
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t front_right_tyre_sensor_battery;

    /**
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t rear_left_tyre_sensor_battery;

    /**
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t rear_right_tyre_sensor_battery;
};

/**
 * Signals in message group48.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group48_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t front_left_tyre_temperature;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t front_right_tyre_temperature;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t rear_left_tyre_temperature;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t rear_right_tyre_temperature;
};

/**
 * Signals in message group47.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group47_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: -101.3
     */
    uint16_t front_left_tyre_pressure;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: -101.3
     */
    uint16_t front_right_tyre_pressure;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: -101.3
     */
    uint16_t rear_left_tyre_pressure;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: -101.3
     */
    uint16_t rear_right_tyre_pressure;
};

/**
 * Signals in message group40.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group40_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t accelerator_pedal_position;
};

/**
 * Signals in message group20.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group20_t {
    /**
     * 20-01
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t coolant_temperature;

    /**
     * 20-02
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t air_temperature;

    /**
     * 20-03
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t fuel_temperature;

    /**
     * 20-04
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t oil_temperature;
};

/**
 * Signals in message group24.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group24_t {
    /**
     * 24-01
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t neutral_switch;

    /**
     * 24-03
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t gear_switch;

    /**
     * 24-07
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t clutch_switch;

    /**
     * 24-08
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t oil_pressure_light;

    /**
     * 24-12
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t flat_shift_switch;

    /**
     * 24-25
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t check_engine_light;
};

/**
 * Signals in message group15.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group15_t {
    /**
     * 15-01
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t battery_voltage;

    /**
     * 15-02
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t target_boost_level;

    /**
     * 15-03
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t barometric_pressure;
};

/**
 * Signals in message group39.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group39_t {
    /**
     * 39-01
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t wideband_overall;

    /**
     * 39-02
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t wideband_bank_1;

    /**
     * 39-03
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t wideband_bank_2;

    /**
     * 39-04
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t gear_selector_position;

    /**
     * 39-05
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t gear;
};

/**
 * Signals in message group13.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group13_t {
    /**
     * 13-01
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vehicle_speed;

    /**
     * 13-02
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t intake_cam_angle_1;

    /**
     * 13-03
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t intake_cam_angle_2;
};

/**
 * Signals in message group5.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group5_t {
    /**
     * 05-01
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t wideband_sensor_1;

    /**
     * 05-02
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t wideband_sensor_2;

    /**
     * 05-03
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t wideband_sensor_3;

    /**
     * 05-04
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t wideband_sensor_4;
};

/**
 * Signals in message group1.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group1_t {
    /**
     * 01-01
     *
     * Range: -
     * Scale: 0.1
     * Offset: -101.3
     */
    uint16_t fuel_pressure;

    /**
     * 01-02
     *
     * Range: -
     * Scale: 0.1
     * Offset: -101.3
     */
    uint16_t oil_pressure;

    /**
     * 01-03
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t engine_demand;

    /**
     * 01-04
     *
     * Range: -
     * Scale: 0.1
     * Offset: -101.3
     */
    uint16_t wastegate_pressure;
};

/**
 * Signals in message group0.
 *
 * All signal values are as on the CAN bus.
 */
struct r3_group0_t {
    /**
     * 00-01
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t rpm;

    /**
     * 00-02
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t manifold_pressure;

    /**
     * 00-03
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t throttle_position;

    /**
     * 00-04
     *
     * Range: -
     * Scale: 0.1
     * Offset: -101.3
     */
    uint16_t coolant_pressure;
};

/**
 * Pack message group45.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group45_pack(
    uint8_t *dst_p,
    const struct r3_group45_t *src_p,
    size_t size);

/**
 * Unpack message group45.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group45_unpack(
    struct r3_group45_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group45.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group45_init(struct r3_group45_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group45_brake_pressure_rear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group45_brake_pressure_rear_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group45_brake_pressure_rear_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group45_brake_pressure_front_ratio_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group45_brake_pressure_front_ratio_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group45_brake_pressure_front_ratio_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group45_brake_pressure_rear_ratio_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group45_brake_pressure_rear_ratio_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group45_brake_pressure_rear_ratio_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group45_brake_pressure_bias_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group45_brake_pressure_bias_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group45_brake_pressure_bias_is_in_range(int16_t value);

/**
 * Pack message group52.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group52_pack(
    uint8_t *dst_p,
    const struct r3_group52_t *src_p,
    size_t size);

/**
 * Unpack message group52.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group52_unpack(
    struct r3_group52_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group52.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group52_init(struct r3_group52_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t r3_group52_total_fuel_used_since_trip_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group52_total_fuel_used_since_trip_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group52_total_fuel_used_since_trip_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t r3_group52_trip_meter_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group52_trip_meter_1_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group52_trip_meter_1_is_in_range(int32_t value);

/**
 * Pack message group50.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group50_pack(
    uint8_t *dst_p,
    const struct r3_group50_t *src_p,
    size_t size);

/**
 * Unpack message group50.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group50_unpack(
    struct r3_group50_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group50.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group50_init(struct r3_group50_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group50_front_tyre_recommended_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group50_front_tyre_recommended_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group50_front_tyre_recommended_pressure_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group50_rear_tyre_recommended_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group50_rear_tyre_recommended_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group50_rear_tyre_recommended_pressure_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group50_rear_right_tyre_air_leak_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group50_rear_right_tyre_air_leak_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group50_rear_right_tyre_air_leak_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group50_rear_left_tyre_air_leak_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group50_rear_left_tyre_air_leak_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group50_rear_left_tyre_air_leak_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group50_front_right_tyre_air_leak_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group50_front_right_tyre_air_leak_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group50_front_right_tyre_air_leak_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group50_front_left_tyre_air_leak_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group50_front_left_tyre_air_leak_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group50_front_left_tyre_air_leak_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group50_engine_protection_severity_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group50_engine_protection_severity_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group50_engine_protection_severity_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group50_engine_protection_reason_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group50_engine_protection_reason_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group50_engine_protection_reason_is_in_range(uint16_t value);

/**
 * Pack message group43.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group43_pack(
    uint8_t *dst_p,
    const struct r3_group43_t *src_p,
    size_t size);

/**
 * Unpack message group43.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group43_unpack(
    struct r3_group43_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group43.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group43_init(struct r3_group43_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group43_vertical_g_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group43_vertical_g_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group43_vertical_g_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group43_pitch_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group43_pitch_rate_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group43_pitch_rate_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group43_roll_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group43_roll_rate_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group43_roll_rate_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group43_yaw_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group43_yaw_rate_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group43_yaw_rate_is_in_range(int16_t value);

/**
 * Pack message group42.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group42_pack(
    uint8_t *dst_p,
    const struct r3_group42_t *src_p,
    size_t size);

/**
 * Unpack message group42.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group42_unpack(
    struct r3_group42_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group42.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group42_init(struct r3_group42_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t r3_group42_total_fuel_used_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group42_total_fuel_used_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group42_total_fuel_used_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t r3_group42_traction_control_switch_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group42_traction_control_switch_state_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group42_traction_control_switch_state_is_in_range(int8_t value);

/**
 * Pack message group49.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group49_pack(
    uint8_t *dst_p,
    const struct r3_group49_t *src_p,
    size_t size);

/**
 * Unpack message group49.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group49_unpack(
    struct r3_group49_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group49.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group49_init(struct r3_group49_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group49_front_left_tyre_sensor_battery_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group49_front_left_tyre_sensor_battery_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group49_front_left_tyre_sensor_battery_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group49_front_right_tyre_sensor_battery_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group49_front_right_tyre_sensor_battery_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group49_front_right_tyre_sensor_battery_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group49_rear_left_tyre_sensor_battery_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group49_rear_left_tyre_sensor_battery_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group49_rear_left_tyre_sensor_battery_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group49_rear_right_tyre_sensor_battery_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group49_rear_right_tyre_sensor_battery_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group49_rear_right_tyre_sensor_battery_is_in_range(uint16_t value);

/**
 * Pack message group48.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group48_pack(
    uint8_t *dst_p,
    const struct r3_group48_t *src_p,
    size_t size);

/**
 * Unpack message group48.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group48_unpack(
    struct r3_group48_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group48.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group48_init(struct r3_group48_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group48_front_left_tyre_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group48_front_left_tyre_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group48_front_left_tyre_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group48_front_right_tyre_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group48_front_right_tyre_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group48_front_right_tyre_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group48_rear_left_tyre_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group48_rear_left_tyre_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group48_rear_left_tyre_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group48_rear_right_tyre_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group48_rear_right_tyre_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group48_rear_right_tyre_temperature_is_in_range(uint16_t value);

/**
 * Pack message group47.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group47_pack(
    uint8_t *dst_p,
    const struct r3_group47_t *src_p,
    size_t size);

/**
 * Unpack message group47.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group47_unpack(
    struct r3_group47_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group47.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group47_init(struct r3_group47_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group47_front_left_tyre_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group47_front_left_tyre_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group47_front_left_tyre_pressure_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group47_front_right_tyre_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group47_front_right_tyre_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group47_front_right_tyre_pressure_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group47_rear_left_tyre_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group47_rear_left_tyre_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group47_rear_left_tyre_pressure_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group47_rear_right_tyre_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group47_rear_right_tyre_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group47_rear_right_tyre_pressure_is_in_range(uint16_t value);

/**
 * Pack message group40.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group40_pack(
    uint8_t *dst_p,
    const struct r3_group40_t *src_p,
    size_t size);

/**
 * Unpack message group40.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group40_unpack(
    struct r3_group40_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group40.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group40_init(struct r3_group40_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group40_accelerator_pedal_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group40_accelerator_pedal_position_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group40_accelerator_pedal_position_is_in_range(uint16_t value);

/**
 * Pack message group20.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group20_pack(
    uint8_t *dst_p,
    const struct r3_group20_t *src_p,
    size_t size);

/**
 * Unpack message group20.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group20_unpack(
    struct r3_group20_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group20.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group20_init(struct r3_group20_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group20_coolant_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group20_coolant_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group20_coolant_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group20_air_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group20_air_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group20_air_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group20_fuel_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group20_fuel_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group20_fuel_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group20_oil_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group20_oil_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group20_oil_temperature_is_in_range(uint16_t value);

/**
 * Pack message group24.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group24_pack(
    uint8_t *dst_p,
    const struct r3_group24_t *src_p,
    size_t size);

/**
 * Unpack message group24.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group24_unpack(
    struct r3_group24_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group24.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group24_init(struct r3_group24_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group24_neutral_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group24_neutral_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group24_neutral_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group24_gear_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group24_gear_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group24_gear_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group24_clutch_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group24_clutch_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group24_clutch_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group24_oil_pressure_light_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group24_oil_pressure_light_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group24_oil_pressure_light_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group24_flat_shift_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group24_flat_shift_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group24_flat_shift_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t r3_group24_check_engine_light_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group24_check_engine_light_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group24_check_engine_light_is_in_range(uint8_t value);

/**
 * Pack message group15.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group15_pack(
    uint8_t *dst_p,
    const struct r3_group15_t *src_p,
    size_t size);

/**
 * Unpack message group15.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group15_unpack(
    struct r3_group15_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group15.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group15_init(struct r3_group15_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group15_battery_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group15_battery_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group15_battery_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group15_target_boost_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group15_target_boost_level_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group15_target_boost_level_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group15_barometric_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group15_barometric_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group15_barometric_pressure_is_in_range(uint16_t value);

/**
 * Pack message group39.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group39_pack(
    uint8_t *dst_p,
    const struct r3_group39_t *src_p,
    size_t size);

/**
 * Unpack message group39.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group39_unpack(
    struct r3_group39_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group39.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group39_init(struct r3_group39_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group39_wideband_overall_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group39_wideband_overall_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group39_wideband_overall_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group39_wideband_bank_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group39_wideband_bank_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group39_wideband_bank_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group39_wideband_bank_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group39_wideband_bank_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group39_wideband_bank_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t r3_group39_gear_selector_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group39_gear_selector_position_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group39_gear_selector_position_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t r3_group39_gear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group39_gear_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group39_gear_is_in_range(int8_t value);

/**
 * Pack message group13.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group13_pack(
    uint8_t *dst_p,
    const struct r3_group13_t *src_p,
    size_t size);

/**
 * Unpack message group13.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group13_unpack(
    struct r3_group13_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group13.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group13_init(struct r3_group13_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group13_vehicle_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group13_vehicle_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group13_vehicle_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group13_intake_cam_angle_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group13_intake_cam_angle_1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group13_intake_cam_angle_1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t r3_group13_intake_cam_angle_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group13_intake_cam_angle_2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group13_intake_cam_angle_2_is_in_range(int16_t value);

/**
 * Pack message group5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group5_pack(
    uint8_t *dst_p,
    const struct r3_group5_t *src_p,
    size_t size);

/**
 * Unpack message group5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group5_unpack(
    struct r3_group5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group5_init(struct r3_group5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group5_wideband_sensor_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group5_wideband_sensor_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group5_wideband_sensor_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group5_wideband_sensor_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group5_wideband_sensor_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group5_wideband_sensor_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group5_wideband_sensor_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group5_wideband_sensor_3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group5_wideband_sensor_3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group5_wideband_sensor_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group5_wideband_sensor_4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group5_wideband_sensor_4_is_in_range(uint16_t value);

/**
 * Pack message group1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group1_pack(
    uint8_t *dst_p,
    const struct r3_group1_t *src_p,
    size_t size);

/**
 * Unpack message group1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group1_unpack(
    struct r3_group1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group1_init(struct r3_group1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group1_fuel_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group1_fuel_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group1_fuel_pressure_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group1_oil_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group1_oil_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group1_oil_pressure_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group1_engine_demand_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group1_engine_demand_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group1_engine_demand_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group1_wastegate_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group1_wastegate_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group1_wastegate_pressure_is_in_range(uint16_t value);

/**
 * Pack message group0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int r3_group0_pack(
    uint8_t *dst_p,
    const struct r3_group0_t *src_p,
    size_t size);

/**
 * Unpack message group0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int r3_group0_unpack(
    struct r3_group0_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from group0.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int r3_group0_init(struct r3_group0_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group0_rpm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group0_rpm_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group0_rpm_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group0_manifold_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group0_manifold_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group0_manifold_pressure_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group0_throttle_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group0_throttle_position_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group0_throttle_position_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t r3_group0_coolant_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double r3_group0_coolant_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool r3_group0_coolant_pressure_is_in_range(uint16_t value);


#ifdef __cplusplus
}
#endif

#endif
